; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\naoya\Documents\Visual Studio 2010\npca.jp\3Dモニター制作\3DMonitor-Direct2D\3DMonitor\dx_engine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1CI@JDDOOFCP@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX0nR?$BNg?$BPS?$BG0kY1eW0W0?$HO0W0_0?$AC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@ ; `string'
PUBLIC	?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z	; DXEngine::InitDirect3D
PUBLIC	??0DXEngine@@QAE@PAUHWND__@@HUtagWNDCLASSEXW@@PAJPAUHINSTANCE__@@0@Z ; DXEngine::DXEngine
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	_memset:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_1CI@JDDOOFCP@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX0nR?$BNg?$BPS?$BG0kY1eW0W0?$HO0W0_0?$AC?$AA?$AA@
; File c:\users\naoya\documents\visual studio 2010\npca.jp\3dモニター制作\3dmonitor-direct2d\3dmonitor\dx_engine.cpp
CONST	SEGMENT
??_C@_1CI@JDDOOFCP@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX0nR?$BNg?$BPS?$BG0kY1eW0W0?$HO0W0_0?$AC?$AA?$AA@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H
	DB	'n0', 01dH, 'R', 01fH, 'g', 016H, 'Sk01YWeW0~0W0_0', 02H, '0', 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@ DB 'n'
	DB	00H, 'p', 00H, 'c', 00H, 'a', 00H, ' ', 00H, '3', 00H, 'D', 00H
	DB	' ', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, 0a8H, '0', 0e9H, '0', 0fcH
	DB	'0', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0DXEngine@@QAE@PAUHWND__@@HUtagWNDCLASSEXW@@PAJPAUHINSTANCE__@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_direct_window$ = 8					; size = 4
_boolFullScreen$ = 12					; size = 4
_buffer_window_class$ = 16				; size = 48
_result$ = 64						; size = 4
_hInstance$ = 68					; size = 4
_main_window$ = 72					; size = 4
??0DXEngine@@QAE@PAUHWND__@@HUtagWNDCLASSEXW@@PAJPAUHINSTANCE__@@0@Z PROC ; DXEngine::DXEngine, COMDAT
; _this$ = ecx
; Line 16
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 17
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 18
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0
; Line 21
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 0
; Line 23
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 360				; 00000168H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 24
	push	256					; 00000100H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _boolFullScreen$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 29
	mov	eax, DWORD PTR _direct_window$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z ; DXEngine::InitDirect3D
	test	eax, eax
	jge	SHORT $LN1@DXEngine
; Line 31
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1CI@JDDOOFCP@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX0nR?$BNg?$BPS?$BG0kY1eW0W0?$HO0W0_0?$AC?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 32
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], -2147467259		; 80004005H
; Line 33
	jmp	SHORT $LN2@DXEngine
$LN1@DXEngine:
; Line 35
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@DXEngine:
; Line 36
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	68					; 00000044H
??0DXEngine@@QAE@PAUHWND__@@HUtagWNDCLASSEXW@@PAJPAUHINSTANCE__@@0@Z ENDP ; DXEngine::DXEngine
_TEXT	ENDS
PUBLIC	?CleanUpDirect3D@DXEngine@@AAEXXZ		; DXEngine::CleanUpDirect3D
PUBLIC	?CleanUpDirectInput@DXEngine@@AAEXXZ		; DXEngine::CleanUpDirectInput
PUBLIC	??1DXEngine@@QAE@XZ				; DXEngine::~DXEngine
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1DXEngine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1DXEngine@@QAE@XZ PROC				; DXEngine::~DXEngine, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 41
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpDirectInput@DXEngine@@AAEXXZ	; DXEngine::CleanUpDirectInput
; Line 42
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpDirect3D@DXEngine@@AAEXXZ	; DXEngine::CleanUpDirect3D
; Line 43
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1DXEngine@@QAE@XZ ENDP				; DXEngine::~DXEngine
_TEXT	ENDS
PUBLIC	__real@bf000000
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	__real@3f000000
PUBLIC	??_C@_08JPMAAECC@POSITION?$AA@			; `string'
PUBLIC	??_C@_06EPLDPNDB@Render?$AA@			; `string'
PUBLIC	??_C@_1NC@HDDILAFE@?$AAT?$AAh?$AAe?$AA?5?$AAF?$AAX?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAb?$AAe?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?4?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1O@ELOHPNHF@?$AAd?$AAe?$AAf?$AA?4?$AAf?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_06BACILOGA@fx_4_0?$AA@			; `string'
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
PUBLIC	__GUID_9b7e4c04_342c_4106_a19f_4f2704f689f0
PUBLIC	__$ArrayPad$
EXTRN	_D3DX10CreateEffectFromFileW@48:PROC
EXTRN	_D3D10CreateDeviceAndSwapChain@32:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT ??_C@_08JPMAAECC@POSITION?$AA@
CONST	SEGMENT
??_C@_08JPMAAECC@POSITION?$AA@ DB 'POSITION', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPLDPNDB@Render?$AA@
CONST	SEGMENT
??_C@_06EPLDPNDB@Render?$AA@ DB 'Render', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1NC@HDDILAFE@?$AAT?$AAh?$AAe?$AA?5?$AAF?$AAX?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAb?$AAe?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?4?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1NC@HDDILAFE@?$AAT?$AAh?$AAe?$AA?5?$AAF?$AAX?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAb?$AAe?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?4?$AA?5?$AA?5@ DB 'T'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 'F', 00H, 'X', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'b', 00H
	DB	'e', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'd', 00H, '.', 00H, ' ', 00H, ' ', 00H, 'P', 00H
	DB	'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'r'
	DB	00H, 'u', 00H, 'n', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'e', 00H, 'c', 00H, 'u'
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'a', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 's', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'F', 00H, 'X', 00H
	DB	' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '.', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@ELOHPNHF@?$AAd?$AAe?$AAf?$AA?4?$AAf?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1O@ELOHPNHF@?$AAd?$AAe?$AAf?$AA?4?$AAf?$AAx?$AA?$AA@ DB 'd', 00H, 'e'
	DB	00H, 'f', 00H, '.', 00H, 'f', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BACILOGA@fx_4_0?$AA@
CONST	SEGMENT
??_C@_06BACILOGA@fx_4_0?$AA@ DB 'fx_4_0', 00H		; `string'
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __GUID_9b7e4c04_342c_4106_a19f_4f2704f689f0
CONST	SEGMENT
__GUID_9b7e4c04_342c_4106_a19f_4f2704f689f0 DD 09b7e4c04H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z
_TEXT	SEGMENT
tv244 = -492						; size = 4
_offset$ = -292						; size = 4
_stride$ = -280						; size = 4
_InitData$ = -268					; size = 12
_bd$ = -248						; size = 20
_vertices$ = -220					; size = 36
_pass_desc$ = -176					; size = 40
_num_elements$ = -128					; size = 4
_layout$ = -116						; size = 28
_shader_flags$ = -80					; size = 4
_view_port$ = -68					; size = 24
_hr$ = -36						; size = 4
_back_buffer$ = -24					; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z PROC		; DXEngine::InitDirect3D, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	sub	esp, 492				; 000001ecH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-492]
	mov	ecx, 123				; 0000007bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 55
	push	60					; 0000003cH
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 56
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 57
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], 0
; Line 58
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+76], 0
; Line 61
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 640			; 00000280H
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 400			; 00000190H
; Line 64
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 28			; 0000001cH
; Line 65
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 20			; 00000014H
; Line 66
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 1
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+40], 32			; 00000020H
; Line 68
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hWnd$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 1
; Line 70
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 0
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 1
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	push	edx
	push	29					; 0000001dH
	push	0
	push	0
	push	1
	push	0
	call	_D3D10CreateDeviceAndSwapChain@32
	test	eax, eax
	jge	SHORT $LN6@InitDirect
; Line 75
	mov	eax, -2147467259			; 80004005H
	jmp	$LN7@InitDirect
$LN6@InitDirect:
; Line 79
	mov	esi, esp
	lea	eax, DWORD PTR _back_buffer$[ebp]
	push	eax
	push	OFFSET __GUID_9b7e4c04_342c_4106_a19f_4f2704f689f0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN5@InitDirect
; Line 80
	mov	eax, -2147467259			; 80004005H
	jmp	$LN7@InitDirect
$LN5@InitDirect:
; Line 82
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 72					; 00000048H
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _back_buffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 83
	mov	eax, DWORD PTR _back_buffer$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _back_buffer$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 84
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@InitDirect
; Line 85
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN7@InitDirect
$LN4@InitDirect:
; Line 87
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+96]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 90
	mov	DWORD PTR _view_port$[ebp+8], 3840	; 00000f00H
; Line 91
	mov	DWORD PTR _view_port$[ebp+12], 2400	; 00000960H
; Line 92
	fldz
	fstp	DWORD PTR _view_port$[ebp+16]
; Line 93
	fld1
	fstp	DWORD PTR _view_port$[ebp+20]
; Line 94
	mov	DWORD PTR _view_port$[ebp], 0
; Line 95
	mov	DWORD PTR _view_port$[ebp+4], 0
; Line 96
	mov	esi, esp
	lea	eax, DWORD PTR _view_port$[ebp]
	push	eax
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+120]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 99
	mov	DWORD PTR _shader_flags$[ebp], 2048	; 00000800H
; Line 101
	mov	eax, DWORD PTR _shader_flags$[ebp]
	or	eax, 1
	mov	DWORD PTR _shader_flags$[ebp], eax
; Line 104
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 76					; 0000004cH
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	push	0
	mov	eax, DWORD PTR _shader_flags$[ebp]
	push	eax
	push	OFFSET ??_C@_06BACILOGA@fx_4_0?$AA@
	push	0
	push	0
	push	OFFSET ??_C@_1O@ELOHPNHF@?$AAd?$AAe?$AAf?$AA?4?$AAf?$AAx?$AA?$AA@
	call	_D3DX10CreateEffectFromFileW@48
	test	eax, eax
	jge	SHORT $LN3@InitDirect
; Line 106
	mov	esi, esp
	push	0
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1NC@HDDILAFE@?$AAT?$AAh?$AAe?$AA?5?$AAF?$AAX?$AA?5?$AAf?$AAi?$AAl?$AAe?$AA?5?$AAc?$AAa?$AAn?$AAn?$AAo?$AAt?$AA?5?$AAb?$AAe?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd?$AA?4?$AA?5?$AA?5@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 107
	mov	eax, -2147467259			; 80004005H
	jmp	$LN7@InitDirect
$LN3@InitDirect:
; Line 111
	mov	esi, esp
	push	OFFSET ??_C@_06EPLDPNDB@Render?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+76]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax
; Line 114
	mov	DWORD PTR _layout$[ebp], OFFSET ??_C@_08JPMAAECC@POSITION?$AA@
	mov	DWORD PTR _layout$[ebp+4], 0
	mov	DWORD PTR _layout$[ebp+8], 6
	mov	DWORD PTR _layout$[ebp+12], 0
	mov	DWORD PTR _layout$[ebp+16], 0
	mov	DWORD PTR _layout$[ebp+20], 0
	mov	DWORD PTR _layout$[ebp+24], 0
; Line 117
	mov	DWORD PTR _num_elements$[ebp], 1
; Line 120
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+80]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv244[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _pass_desc$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv244[ebp]
	push	ecx
	mov	edx, DWORD PTR tv244[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+4]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 84					; 00000054H
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _pass_desc$[ebp+12]
	push	ecx
	mov	edx, DWORD PTR _pass_desc$[ebp+8]
	push	edx
	mov	eax, DWORD PTR _num_elements$[ebp]
	push	eax
	lea	ecx, DWORD PTR _layout$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+312]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN2@InitDirect
; Line 123
	mov	eax, -2147467259			; 80004005H
	jmp	$LN7@InitDirect
$LN2@InitDirect:
; Line 125
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+84]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 130
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _vertices$[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
; Line 131
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf000000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _vertices$[ebp+12]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
; Line 132
	push	ecx
	fld	DWORD PTR __real@3f000000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf000000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@bf000000
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _vertices$[ebp+24]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
; Line 135
	mov	DWORD PTR _bd$[ebp+4], 0
; Line 136
	mov	DWORD PTR _bd$[ebp], 36			; 00000024H
; Line 137
	mov	DWORD PTR _bd$[ebp+8], 1
; Line 138
	mov	DWORD PTR _bd$[ebp+12], 0
; Line 139
	mov	DWORD PTR _bd$[ebp+16], 0
; Line 141
	lea	eax, DWORD PTR _vertices$[ebp]
	mov	DWORD PTR _InitData$[ebp], eax
; Line 142
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 88					; 00000058H
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _InitData$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bd$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+284]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN1@InitDirect
; Line 143
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN7@InitDirect
$LN1@InitDirect:
; Line 145
	mov	DWORD PTR _stride$[ebp], 12		; 0000000cH
; Line 146
	mov	DWORD PTR _offset$[ebp], 0
; Line 147
	mov	esi, esp
	lea	eax, DWORD PTR _offset$[ebp]
	push	eax
	lea	ecx, DWORD PTR _stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 88					; 00000058H
	push	edx
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+48]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 150
	mov	esi, esp
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 182
	xor	eax, eax
$LN7@InitDirect:
; Line 183
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@InitDirect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 492				; 000001ecH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN19@InitDirect:
	DD	9
	DD	$LN18@InitDirect
$LN18@InitDirect:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN9@InitDirect
	DD	-68					; ffffffbcH
	DD	24					; 00000018H
	DD	$LN10@InitDirect
	DD	-116					; ffffff8cH
	DD	28					; 0000001cH
	DD	$LN11@InitDirect
	DD	-176					; ffffff50H
	DD	40					; 00000028H
	DD	$LN12@InitDirect
	DD	-220					; ffffff24H
	DD	36					; 00000024H
	DD	$LN13@InitDirect
	DD	-248					; ffffff08H
	DD	20					; 00000014H
	DD	$LN14@InitDirect
	DD	-268					; fffffef4H
	DD	12					; 0000000cH
	DD	$LN15@InitDirect
	DD	-280					; fffffee8H
	DD	4
	DD	$LN16@InitDirect
	DD	-292					; fffffedcH
	DD	4
	DD	$LN17@InitDirect
$LN17@InitDirect:
	DB	111					; 0000006fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN16@InitDirect:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
$LN15@InitDirect:
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	0
$LN14@InitDirect:
	DB	98					; 00000062H
	DB	100					; 00000064H
	DB	0
$LN13@InitDirect:
	DB	118					; 00000076H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN12@InitDirect:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	95					; 0000005fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	99					; 00000063H
	DB	0
$LN11@InitDirect:
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	0
$LN10@InitDirect:
	DB	118					; 00000076H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	95					; 0000005fH
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN9@InitDirect:
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	95					; 0000005fH
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z ENDP		; DXEngine::InitDirect3D
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx10math.inl
; Line 320
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 321
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fx$[ebp]
	fstp	DWORD PTR [eax]
; Line 322
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fstp	DWORD PTR [eax+4]
; Line 323
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fz$[ebp]
	fstp	DWORD PTR [eax+8]
; Line 324
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?CleanUpDirect3D@DXEngine@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CleanUpDirect3D@DXEngine@@AAEXXZ PROC			; DXEngine::CleanUpDirect3D, COMDAT
; _this$ = ecx
; File c:\users\naoya\documents\visual studio 2010\npca.jp\3dモニター制作\3dmonitor-direct2d\3dmonitor\dx_engine.cpp
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 192
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN4@CleanUpDir
; Line 193
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+276]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CleanUpDir:
; Line 196
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	SHORT $LN3@CleanUpDir
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], 0
$LN3@CleanUpDir:
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+64], 0
	je	SHORT $LN2@CleanUpDir
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
$LN2@CleanUpDir:
; Line 198
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+68], 0
	je	SHORT $LN5@CleanUpDir
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 0
$LN5@CleanUpDir:
; Line 199
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CleanUpDirect3D@DXEngine@@AAEXXZ ENDP			; DXEngine::CleanUpDirect3D
_TEXT	ENDS
PUBLIC	?CheckFullScreen@DXEngine@@QAEHXZ		; DXEngine::CheckFullScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CheckFullScreen@DXEngine@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CheckFullScreen@DXEngine@@QAEHXZ PROC			; DXEngine::CheckFullScreen, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 204
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 205
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckFullScreen@DXEngine@@QAEHXZ ENDP			; DXEngine::CheckFullScreen
_TEXT	ENDS
PUBLIC	?get_d3d_device@DXEngine@@QAEPAUID3D10Device@@XZ ; DXEngine::get_d3d_device
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_d3d_device@DXEngine@@QAEPAUID3D10Device@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_d3d_device@DXEngine@@QAEPAUID3D10Device@@XZ PROC	; DXEngine::get_d3d_device, COMDAT
; _this$ = ecx
; Line 209
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 210
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+68]
; Line 211
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_d3d_device@DXEngine@@QAEPAUID3D10Device@@XZ ENDP	; DXEngine::get_d3d_device
_TEXT	ENDS
PUBLIC	?ClearRenderTargetView@DXEngine@@QAEXQBM@Z	; DXEngine::ClearRenderTargetView
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearRenderTargetView@DXEngine@@QAEXQBM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_color$ = 8						; size = 4
?ClearRenderTargetView@DXEngine@@QAEXQBM@Z PROC		; DXEngine::ClearRenderTargetView, COMDAT
; _this$ = ecx
; Line 344
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 345
	mov	esi, esp
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+140]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 346
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearRenderTargetView@DXEngine@@QAEXQBM@Z ENDP		; DXEngine::ClearRenderTargetView
_TEXT	ENDS
PUBLIC	?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z		; DXEngine::SetupMouse
PUBLIC	?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z	; DXEngine::SetupKeybord
PUBLIC	?InitDirectInput@DXEngine@@AAEJPAUHWND__@@PAUHINSTANCE__@@@Z ; DXEngine::InitDirectInput
EXTRN	_DirectInput8Create@20:PROC
EXTRN	_IID_IDirectInput8W:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InitDirectInput@DXEngine@@AAEJPAUHWND__@@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
_hInstance$ = 12					; size = 4
?InitDirectInput@DXEngine@@AAEJPAUHWND__@@PAUHINSTANCE__@@@Z PROC ; DXEngine::InitDirectInput, COMDAT
; _this$ = ecx
; Line 350
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 351
	mov	DWORD PTR _hr$[ebp], 0
; Line 353
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpDirectInput@DXEngine@@AAEXXZ	; DXEngine::CleanUpDirectInput
; Line 357
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	push	OFFSET _IID_IDirectInput8W
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	_DirectInput8Create@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@InitDirect@2
; Line 358
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@InitDirect@2
$LN3@InitDirect@2:
; Line 361
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z ; DXEngine::SetupKeybord
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@InitDirect@2
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@InitDirect@2
$LN2@InitDirect@2:
; Line 362
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z	; DXEngine::SetupMouse
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@InitDirect@2
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@InitDirect@2
$LN1@InitDirect@2:
; Line 364
	mov	eax, DWORD PTR _hr$[ebp]
$LN4@InitDirect@2:
; Line 365
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InitDirectInput@DXEngine@@AAEJPAUHWND__@@PAUHINSTANCE__@@@Z ENDP ; DXEngine::InitDirectInput
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?CleanUpDirectInput@DXEngine@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CleanUpDirectInput@DXEngine@@AAEXXZ PROC		; DXEngine::CleanUpDirectInput, COMDAT
; _this$ = ecx
; Line 369
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 371
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN5@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@CleanUpDir@2:
; Line 372
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN4@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CleanUpDir@2:
; Line 374
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN3@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
$LN3@CleanUpDir@2:
; Line 375
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN2@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+100], 0
$LN2@CleanUpDir@2:
; Line 377
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN6@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+92]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+92], 0
$LN6@CleanUpDir@2:
; Line 378
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CleanUpDirectInput@DXEngine@@AAEXXZ ENDP		; DXEngine::CleanUpDirectInput
_TEXT	ENDS
PUBLIC	??_C@_1DI@FGBEPFOF@0?$KN0?$PM0?$NM0?$PM0?I0?$JCvz?$IJ?$IL0g0M0?$HO0?$FL0?$JD0g0W0_0?$AC?$AA?6?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?$AA@ ; `string'
EXTRN	_c_dfDIKeyboard:BYTE
EXTRN	_GUID_SysKeyboard:BYTE
;	COMDAT ??_C@_1DI@FGBEPFOF@0?$KN0?$PM0?$NM0?$PM0?I0?$JCvz?$IJ?$IL0g0M0?$HO0?$FL0?$JD0g0W0_0?$AC?$AA?6?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FGBEPFOF@0?$KN0?$PM0?$NM0?$PM0?I0?$JCvz?$IJ?$IL0g0M0?$HO0?$FL0?$JD0g0W0_0?$AC?$AA?6?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?$AA@ DB 0adH
	DB	'0', 0fcH, '0', 0dcH, '0', 0fcH, '0', 0c9H, '0', 092H, '0zv', 08bH
	DB	089H, 'g0M0~0[0', 093H, '0g0W0_0', 02H, '0', 0aH, 00H, 08H, 0ffH
	DB	']0', 093H, '0j0', 0d0H, '0', 0abH, '0j0', 01fH, 0ffH, 09H, 0ffH
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z PROC		; DXEngine::SetupKeybord, COMDAT
; _this$ = ecx
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 387
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 96					; 00000060H
	push	eax
	push	OFFSET _GUID_SysKeyboard
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@SetupKeybo
; Line 388
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN5@SetupKeybo
$LN4@SetupKeybo:
; Line 390
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN3@SetupKeybo
; Line 392
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1DI@FGBEPFOF@0?$KN0?$PM0?$NM0?$PM0?I0?$JCvz?$IJ?$IL0g0M0?$HO0?$FL0?$JD0g0W0_0?$AC?$AA?6?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 393
	xor	eax, eax
	jmp	$LN5@SetupKeybo
$LN3@SetupKeybo:
; Line 399
	mov	esi, esp
	push	OFFSET _c_dfDIKeyboard
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@SetupKeybo
; Line 400
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN5@SetupKeybo
$LN2@SetupKeybo:
; Line 405
	mov	esi, esp
	push	22					; 00000016H
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetupKeybo
; Line 406
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN5@SetupKeybo
$LN1@SetupKeybo:
; Line 409
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 411
	xor	eax, eax
$LN5@SetupKeybo:
; Line 412
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z ENDP		; DXEngine::SetupKeybord
_TEXT	ENDS
PUBLIC	??_C@_1DM@JAFJKNDA@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAn?$AAp?$AAu?$AAt0L0?$LF0?$NN0?$PM0?H0W0f0D0j0DST?$IK?$LP0?l0?Y0?k0g0Y0?$AC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@CGOOEILF@0?$NO0?$KG0?$LJ0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0g0W0_?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?6N?V0n0?G0?P0?$KE0?$LJ0gd?M@ ; `string'
EXTRN	_c_dfDIMouse2:BYTE
EXTRN	_GUID_SysMouse:BYTE
;	COMDAT ??_C@_1DM@JAFJKNDA@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAn?$AAp?$AAu?$AAt0L0?$LF0?$NN0?$PM0?H0W0f0D0j0DST?$IK?$LP0?l0?Y0?k0g0Y0?$AC?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@JAFJKNDA@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAn?$AAp?$AAu?$AAt0L0?$LF0?$NN0?$PM0?H0W0f0D0j0DST?$IK?$LP0?l0?Y0?k0g0Y0?$AC?$AA?$AA@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'I', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L0', 0b5H, '0', 0ddH, '0'
	DB	0fcH, '0', 0c8H, '0W0f0D0j0D0TS', 0bfH, 08aH, 0ecH, '0', 0d9H, '0'
	DB	0ebH, '0g0Y0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@CGOOEILF@0?$NO0?$KG0?$LJ0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0g0W0_?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?6N?V0n0?G0?P0?$KE0?$LJ0gd?M@
CONST	SEGMENT
??_C@_1EM@CGOOEILF@0?$NO0?$KG0?$LJ0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0g0W0_?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?6N?V0n0?G0?P0?$KE0?$LJ0gd?M@ DB 0deH
	DB	'0', 0a6H, '0', 0b9H, '0L0', 08bH, 089H, 'd0K0', 08aH, '0~0[0', 093H
	DB	'0g0W0_0', 08H, 0ffH, ']0', 093H, '0j0', 0d0H, '0', 0abH, '0j0'
	DB	01fH, 0ffH, 09H, 0ffH, 0aH, 00H, 0d6H, 'Nn0', 0c7H, '0', 0d0H, '0'
	DB	0a4H, '0', 0b9H, '0g0', 0cdH, 'd\O', 092H, '0W0~0Y0', 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z PROC		; DXEngine::SetupMouse, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 417
	mov	DWORD PTR _hr$[ebp], 0
; Line 420
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 100				; 00000064H
	push	eax
	push	OFFSET _GUID_SysMouse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@SetupMouse
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN6@SetupMouse
$LN5@SetupMouse:
; Line 422
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN4@SetupMouse
; Line 424
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1EM@CGOOEILF@0?$NO0?$KG0?$LJ0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0g0W0_?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?6N?V0n0?G0?P0?$KE0?$LJ0gd?M@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 425
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN6@SetupMouse
$LN4@SetupMouse:
; Line 431
	mov	esi, esp
	push	OFFSET _c_dfDIMouse2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@SetupMouse
; Line 432
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@SetupMouse
$LN3@SetupMouse:
; Line 439
	mov	esi, esp
	push	5
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@SetupMouse
; Line 441
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpDirectInput@DXEngine@@AAEXXZ	; DXEngine::CleanUpDirectInput
; Line 442
	cmp	DWORD PTR _hr$[ebp], -2147467263	; 80004001H
	jne	SHORT $LN1@SetupMouse
; Line 444
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1DM@JAFJKNDA@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAn?$AAp?$AAu?$AAt0L0?$LF0?$NN0?$PM0?H0W0f0D0j0DST?$IK?$LP0?l0?Y0?k0g0Y0?$AC?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetupMouse:
; Line 446
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@SetupMouse
$LN2@SetupMouse:
; Line 450
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 452
	xor	eax, eax
$LN6@SetupMouse:
; Line 453
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z ENDP		; DXEngine::SetupMouse
_TEXT	ENDS
PUBLIC	?GetMouseInput@DXEngine@@AAEXXZ			; DXEngine::GetMouseInput
PUBLIC	?GetKeybordInput@DXEngine@@AAEXXZ		; DXEngine::GetKeybordInput
PUBLIC	?GetInput@DXEngine@@QAEXXZ			; DXEngine::GetInput
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetInput@DXEngine@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetInput@DXEngine@@QAEXXZ PROC				; DXEngine::GetInput, COMDAT
; _this$ = ecx
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 458
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN2@GetInput
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetKeybordInput@DXEngine@@AAEXXZ	; DXEngine::GetKeybordInput
$LN2@GetInput:
; Line 459
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	SHORT $LN3@GetInput
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMouseInput@DXEngine@@AAEXXZ		; DXEngine::GetMouseInput
$LN3@GetInput:
; Line 460
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInput@DXEngine@@QAEXXZ ENDP				; DXEngine::GetInput
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetKeybordInput@DXEngine@@AAEXXZ
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?GetKeybordInput@DXEngine@@AAEXXZ PROC			; DXEngine::GetKeybordInput, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 467
	push	256					; 00000100H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 469
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN5@GetKeybord
	jmp	SHORT $LN6@GetKeybord
$LN5@GetKeybord:
; Line 471
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
	mov	esi, esp
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 472
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@GetKeybord
; Line 475
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN3@GetKeybord:
; Line 476
	cmp	DWORD PTR _hr$[ebp], -2147024866	; 8007001eH
	jne	SHORT $LN6@GetKeybord
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+96]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN3@GetKeybord
$LN6@GetKeybord:
; Line 480
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKeybordInput@DXEngine@@AAEXXZ ENDP			; DXEngine::GetKeybordInput
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetMouseInput@DXEngine@@AAEXXZ
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?GetMouseInput@DXEngine@@AAEXXZ PROC			; DXEngine::GetMouseInput, COMDAT
; _this$ = ecx
; Line 484
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 487
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 360				; 00000168H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 489
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	jne	SHORT $LN5@GetMouseIn
	jmp	SHORT $LN6@GetMouseIn
$LN5@GetMouseIn:
; Line 490
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 360				; 00000168H
	mov	esi, esp
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 491
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@GetMouseIn
; Line 494
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN3@GetMouseIn:
; Line 495
	cmp	DWORD PTR _hr$[ebp], -2147024866	; 8007001eH
	jne	SHORT $LN6@GetMouseIn
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+100]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN3@GetMouseIn
$LN6@GetMouseIn:
; Line 502
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseInput@DXEngine@@AAEXXZ ENDP			; DXEngine::GetMouseInput
_TEXT	ENDS
PUBLIC	?get_keybord_state@DXEngine@@QAEPAEXZ		; DXEngine::get_keybord_state
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_keybord_state@DXEngine@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_keybord_state@DXEngine@@QAEPAEXZ PROC		; DXEngine::get_keybord_state, COMDAT
; _this$ = ecx
; Line 506
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 507
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 104				; 00000068H
; Line 508
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_keybord_state@DXEngine@@QAEPAEXZ ENDP		; DXEngine::get_keybord_state
_TEXT	ENDS
PUBLIC	?get_mouse_state@DXEngine@@QAE?AU_DIMOUSESTATE2@@XZ ; DXEngine::get_mouse_state
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_mouse_state@DXEngine@@QAE?AU_DIMOUSESTATE2@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_mouse_state@DXEngine@@QAE?AU_DIMOUSESTATE2@@XZ PROC ; DXEngine::get_mouse_state, COMDAT
; _this$ = ecx
; Line 512
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 513
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 360				; 00000168H
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 514
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_mouse_state@DXEngine@@QAE?AU_DIMOUSESTATE2@@XZ ENDP ; DXEngine::get_mouse_state
_TEXT	ENDS
END
