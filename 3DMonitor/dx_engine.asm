; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	C:\Users\naoya\Documents\Visual Studio 2010\npca.jp\3Dモニター制作\3DMonitor-分岐\3DMonitor\dx_engine.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_1CI@JDDOOFCP@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX0nR?$BNg?$BPS?$BG0kY1eW0W0?$HO0W0_0?$AC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@ ; `string'
PUBLIC	?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z	; DXEngine::InitDirect3D
PUBLIC	??0DXEngine@@QAE@PAUHWND__@@HUtagWNDCLASSEXW@@PAJPAUHINSTANCE__@@0@Z ; DXEngine::DXEngine
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	_memset:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT ??_C@_1CI@JDDOOFCP@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX0nR?$BNg?$BPS?$BG0kY1eW0W0?$HO0W0_0?$AC?$AA?$AA@
; File c:\users\naoya\documents\visual studio 2010\npca.jp\3dモニター制作\3dmonitor-分岐\3dmonitor\dx_engine.cpp
CONST	SEGMENT
??_C@_1CI@JDDOOFCP@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX0nR?$BNg?$BPS?$BG0kY1eW0W0?$HO0W0_0?$AC?$AA?$AA@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'X', 00H
	DB	'n0', 01dH, 'R', 01fH, 'g', 016H, 'Sk01YWeW0~0W0_0', 02H, '0', 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@ DB 'n'
	DB	00H, 'p', 00H, 'c', 00H, 'a', 00H, ' ', 00H, '3', 00H, 'D', 00H
	DB	' ', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, 0a8H, '0', 0e9H, '0', 0fcH
	DB	'0', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??0DXEngine@@QAE@PAUHWND__@@HUtagWNDCLASSEXW@@PAJPAUHINSTANCE__@@0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_buffer_window$ = 8					; size = 4
_boolFullScreen$ = 12					; size = 4
_buffer_window_class$ = 16				; size = 48
_result$ = 64						; size = 4
_hInstance$ = 68					; size = 4
_main_window$ = 72					; size = 4
??0DXEngine@@QAE@PAUHWND__@@HUtagWNDCLASSEXW@@PAJPAUHINSTANCE__@@0@Z PROC ; DXEngine::DXEngine, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 17
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 18
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+512], 0
; Line 19
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+520], 0
; Line 21
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 780				; 0000030cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 22
	push	256					; 00000100H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 524				; 0000020cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _boolFullScreen$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 38
	mov	eax, DWORD PTR _buffer_window$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z ; DXEngine::InitDirect3D
	test	eax, eax
	jge	SHORT $LN1@DXEngine
; Line 40
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1CI@JDDOOFCP@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAX0nR?$BNg?$BPS?$BG0kY1eW0W0?$HO0W0_0?$AC?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 41
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], -2147467259		; 80004005H
; Line 42
	jmp	SHORT $LN2@DXEngine
$LN1@DXEngine:
; Line 44
	mov	eax, DWORD PTR _result$[ebp]
	mov	DWORD PTR [eax], 0
$LN2@DXEngine:
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	68					; 00000044H
??0DXEngine@@QAE@PAUHWND__@@HUtagWNDCLASSEXW@@PAJPAUHINSTANCE__@@0@Z ENDP ; DXEngine::DXEngine
_TEXT	ENDS
PUBLIC	?CleanUpDirect3D@DXEngine@@AAEXXZ		; DXEngine::CleanUpDirect3D
PUBLIC	?CleanUpDirectInput@DXEngine@@AAEXXZ		; DXEngine::CleanUpDirectInput
PUBLIC	??1DXEngine@@QAE@XZ				; DXEngine::~DXEngine
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1DXEngine@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1DXEngine@@QAE@XZ PROC				; DXEngine::~DXEngine, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 50
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpDirectInput@DXEngine@@AAEXXZ	; DXEngine::CleanUpDirectInput
; Line 51
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpDirect3D@DXEngine@@AAEXXZ	; DXEngine::CleanUpDirect3D
; Line 52
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1DXEngine@@QAE@XZ ENDP				; DXEngine::~DXEngine
_TEXT	ENDS
PUBLIC	??$sprintf_s@$09@@YAHAAY09DPBDZZ		; sprintf_s<10>
PUBLIC	??_C@_05BOMAELGN@tex?$CFd?$AA@			; `string'
PUBLIC	??_C@_02LDEEDOKO@P0?$AA@			; `string'
PUBLIC	??_C@_1BA@PLOLBLMM@?$AAh?$AAl?$AAs?$AAl?$AA?4?$AAf?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@DHLLDMMG@?$FL?$PO_?$NM0W0f0j0D0_0?$IB0_0?$IB0?T0?$KP0?$LL0?k0?$LH0?$KH0?$PM0?$MA0oR?U0M0?$HO0?$FL0?$JD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EA@LNIFGPBJ@?$FL?$PO_?$NM0W0f0j0D0_0?$IB0_0?$IB0?T0?$KP0?$LL0?k0?$LH0?$KH0?$PM0?$MA0h?$JI?$ACp?$LJ0?$LH0?$KH0?$PM0?$MA0oR?U0M0?$HO0?$FL0?$JD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@EBHLCHCN@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD0?$JCR?$BNg?$BPS?$BG0g0M0?$HO0?$FL0?$JD0g0W0_?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@GFMJLKBD@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD0?$JCR?$BNg?$BPS?$BG0Y0?$ILgaN?v0?$JCn?$IA0_0W0f0D0j0D0g0Y0?$AC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@PCJGFOBJ@0?G0?$KD0?$LJ0?W0?l0?$KE0?b0?$PM0?I0nS?V_?$JH0kY1eW0W0?$HO0W0_?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@GMIFNOFA@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?$AA@ ; `string'
PUBLIC	__$ArrayPad$
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	_D3DXCreateEffectFromFileW@32:PROC
EXTRN	_Direct3DCreate9@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT ??_C@_05BOMAELGN@tex?$CFd?$AA@
CONST	SEGMENT
??_C@_05BOMAELGN@tex?$CFd?$AA@ DB 'tex%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LDEEDOKO@P0?$AA@
CONST	SEGMENT
??_C@_02LDEEDOKO@P0?$AA@ DB 'P0', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@PLOLBLMM@?$AAh?$AAl?$AAs?$AAl?$AA?4?$AAf?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@PLOLBLMM@?$AAh?$AAl?$AAs?$AAl?$AA?4?$AAf?$AAx?$AA?$AA@ DB 'h', 00H
	DB	'l', 00H, 's', 00H, 'l', 00H, '.', 00H, 'f', 00H, 'x', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@DHLLDMMG@?$FL?$PO_?$NM0W0f0j0D0_0?$IB0_0?$IB0?T0?$KP0?$LL0?k0?$LH0?$KH0?$PM0?$MA0oR?U0M0?$HO0?$FL0?$JD?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@DHLLDMMG@?$FL?$PO_?$NM0W0f0j0D0_0?$IB0_0?$IB0?T0?$KP0?$LL0?k0?$LH0?$KH0?$PM0?$MA0oR?U0M0?$HO0?$FL0?$JD?$AA?$AA@ DB 0feH
	DB	'[', 0dcH, '_W0f0j0D0_0', 081H, '0_0', 081H, '0', 0d4H, '0', 0afH
	DB	'0', 0bbH, '0', 0ebH, '0', 0b7H, '0', 0a7H, '0', 0fcH, '0', 0c0H
	DB	'0o0', 0d5H, 'RM0~0[0', 093H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@LNIFGPBJ@?$FL?$PO_?$NM0W0f0j0D0_0?$IB0_0?$IB0?T0?$KP0?$LL0?k0?$LH0?$KH0?$PM0?$MA0h?$JI?$ACp?$LJ0?$LH0?$KH0?$PM0?$MA0oR?U0M0?$HO0?$FL0?$JD?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@LNIFGPBJ@?$FL?$PO_?$NM0W0f0j0D0_0?$IB0_0?$IB0?T0?$KP0?$LL0?k0?$LH0?$KH0?$PM0?$MA0h?$JI?$ACp?$LJ0?$LH0?$KH0?$PM0?$MA0oR?U0M0?$HO0?$FL0?$JD?$AA?$AA@ DB 0feH
	DB	'[', 0dcH, '_W0f0j0D0_0', 081H, '0_0', 081H, '0', 0d4H, '0', 0afH
	DB	'0', 0bbH, '0', 0ebH, '0', 0b7H, '0', 0a7H, '0', 0fcH, '0', 0c0H
	DB	'0h0', 02H, 098H, 0b9H, 'p', 0b7H, '0', 0a7H, '0', 0fcH, '0', 0c0H
	DB	'0o0', 0d5H, 'RM0~0[0', 093H, '0', 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EBHLCHCN@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD0?$JCR?$BNg?$BPS?$BG0g0M0?$HO0?$FL0?$JD0g0W0_?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EBHLCHCN@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD0?$JCR?$BNg?$BPS?$BG0g0M0?$HO0?$FL0?$JD0g0W0_?$AA?$AA@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3', 00H
	DB	'D', 00H, 092H, '0', 01dH, 'R', 01fH, 'g', 016H, 'Sg0M0~0[0', 093H
	DB	'0g0W0_0', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@GFMJLKBD@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD0?$JCR?$BNg?$BPS?$BG0Y0?$ILgaN?v0?$JCn?$IA0_0W0f0D0j0D0g0Y0?$AC?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@GFMJLKBD@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD0?$JCR?$BNg?$BPS?$BG0Y0?$ILgaN?v0?$JCn?$IA0_0W0f0D0j0D0g0Y0?$AC?$AA?$AA@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, '3', 00H
	DB	'D', 00H, 092H, '0', 01dH, 'R', 01fH, 'g', 016H, 'SY0', 08bH, '0'
	DB	'ag', 0f6H, 'N', 092H, '0', 080H, 'n_0W0f0D0j0D0g0Y0', 02H, '0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@PCJGFOBJ@0?G0?$KD0?$LJ0?W0?l0?$KE0?b0?$PM0?I0nS?V_?$JH0kY1eW0W0?$HO0W0_?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@PCJGFOBJ@0?G0?$KD0?$LJ0?W0?l0?$KE0?b0?$PM0?I0nS?V_?$JH0kY1eW0W0?$HO0W0_?$AA?$AA@ DB 0c7H
	DB	'0', 0a3H, '0', 0b9H, '0', 0d7H, '0', 0ecH, '0', 0a4H, '0', 0e2H
	DB	'0', 0fcH, '0', 0c9H, '0n0', 0d6H, 'S', 097H, '_k01YWeW0~0W0_0'
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GMIFNOFA@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@GMIFNOFA@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?$AA@ DB 'n'
	DB	00H, 'p', 00H, 'c', 00H, 'a', 00H, ' ', 00H, '3', 00H, 'D', 00H
	DB	' ', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z
_TEXT	SEGMENT
tv72 = -2300						; size = 4
_value_name$81111 = -2100				; size = 10
_i$81107 = -2080					; size = 4
_error_message$81098 = -2068				; size = 2000
_err$ = -60						; size = 4
_aDisplayMode$ = -48					; size = 16
_i$81065 = -24						; size = 4
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_hWnd$ = 8						; size = 4
?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z PROC		; DXEngine::InitDirect3D, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 2300				; 000008fcH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-2300]
	mov	ecx, 575				; 0000023fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 57
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+360], 0
; Line 58
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+364], 0
; Line 59
	mov	DWORD PTR _i$81065[ebp], 0
	jmp	SHORT $LN17@InitDirect
$LN16@InitDirect:
	mov	eax, DWORD PTR _i$81065[ebp]
	add	eax, 1
	mov	DWORD PTR _i$81065[ebp], eax
$LN17@InitDirect:
	cmp	DWORD PTR _i$81065[ebp], 36		; 00000024H
	jge	SHORT $LN15@InitDirect
; Line 60
	mov	eax, DWORD PTR _i$81065[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+216], 0
; Line 61
	jmp	SHORT $LN16@InitDirect
$LN15@InitDirect:
; Line 64
	push	32					; 00000020H
	call	_Direct3DCreate9@4
	mov	DWORD PTR tv72[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [eax+4], ecx
	cmp	DWORD PTR tv72[ebp], 0
	jne	SHORT $LN14@InitDirect
	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@InitDirect
$LN14@InitDirect:
; Line 66
	push	56					; 00000038H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 70
	mov	esi, esp
	lea	eax, DWORD PTR _aDisplayMode$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+32]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN13@InitDirect
; Line 72
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DA@GMIFNOFA@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?$AA@
	push	OFFSET ??_C@_1CI@PCJGFOBJ@0?G0?$KD0?$LJ0?W0?l0?$KE0?b0?$PM0?I0nS?V_?$JH0kY1eW0W0?$HO0W0_?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 73
	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@InitDirect
$LN13@InitDirect:
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 2400		; 00000960H
; Line 81
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 3840		; 00000f00H
; Line 83
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 22			; 00000016H
; Line 90
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+44], 1
; Line 93
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 1
; Line 94
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 95
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
; Line 96
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], 1
; Line 97
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 1
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+52], 80			; 00000050H
; Line 99
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _hWnd$[ebp]
	mov	DWORD PTR [eax+40], ecx
; Line 100
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 1
; Line 101
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+60], 0
; Line 102
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], 0
; Line 105
	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _aDisplayMode$[ebp+12]
	push	eax
	push	1
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN12@InitDirect
; Line 106
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DA@GMIFNOFA@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?$AA@
	push	OFFSET ??_C@_1DI@GFMJLKBD@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD0?$JCR?$BNg?$BPS?$BG0Y0?$ILgaN?v0?$JCn?$IA0_0W0f0D0j0D0g0Y0?$AC?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 107
	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@InitDirect
$LN12@InitDirect:
; Line 113
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	64					; 00000040H
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	$LN11@InitDirect
; Line 118
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	$LN10@InitDirect
; Line 122
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	push	32					; 00000020H
	mov	edx, DWORD PTR _hWnd$[ebp]
	push	edx
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+64]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jge	SHORT $LN9@InitDirect
; Line 125
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DA@GMIFNOFA@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?$AA@
	push	OFFSET ??_C@_1CK@EBHLCHCN@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AA3?$AAD0?$JCR?$BNg?$BPS?$BG0g0M0?$HO0?$FL0?$JD0g0W0_?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 126
	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@InitDirect
; Line 127
	jmp	SHORT $LN8@InitDirect
$LN9@InitDirect:
; Line 128
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DA@GMIFNOFA@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?$AA@
	push	OFFSET ??_C@_1EA@LNIFGPBJ@?$FL?$PO_?$NM0W0f0j0D0_0?$IB0_0?$IB0?T0?$KP0?$LL0?k0?$LH0?$KH0?$PM0?$MA0h?$JI?$ACp?$LJ0?$LH0?$KH0?$PM0?$MA0oR?U0M0?$HO0?$FL0?$JD?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN8@InitDirect:
; Line 130
	jmp	SHORT $LN11@InitDirect
$LN10@InitDirect:
; Line 131
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DA@GMIFNOFA@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?$AA@
	push	OFFSET ??_C@_1DC@DHLLDMMG@?$FL?$PO_?$NM0W0f0j0D0_0?$IB0_0?$IB0?T0?$KP0?$LL0?k0?$LH0?$KH0?$PM0?$MA0oR?U0M0?$HO0?$FL0?$JD?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN11@InitDirect:
; Line 135
	mov	esi, esp
	push	2
	push	2
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 136
	mov	esi, esp
	push	0
	push	3
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 137
	mov	esi, esp
	push	4
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 139
	mov	DWORD PTR _err$[ebp], 0
; Line 140
	lea	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 360				; 00000168H
	push	ecx
	push	0
	push	0
	push	0
	push	0
	push	OFFSET ??_C@_1BA@PLOLBLMM@?$AAh?$AAl?$AAs?$AAl?$AA?4?$AAf?$AAx?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	call	_D3DXCreateEffectFromFileW@32
	test	eax, eax
	jge	SHORT $LN6@InitDirect
; Line 143
	mov	esi, esp
	push	999					; 000003e7H
	lea	eax, DWORD PTR _error_message$81098[ebp]
	push	eax
	push	-1
	mov	ecx, DWORD PTR _err$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	edi, esp
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	edi, esp
	call	__RTC_CheckEsp
	push	eax
	push	0
	push	0
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN5@InitDirect
; Line 145
	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@InitDirect
$LN5@InitDirect:
; Line 150
	mov	esi, esp
	push	0
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	lea	eax, DWORD PTR _error_message$81098[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 151
	mov	eax, -2147467259			; 80004005H
	jmp	$LN18@InitDirect
$LN6@InitDirect:
; Line 153
	mov	esi, esp
	push	OFFSET ??_C@_02LDEEDOKO@P0?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+360]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+52]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+364], eax
; Line 154
	cmp	DWORD PTR _err$[ebp], 0
	je	SHORT $LN4@InitDirect
	mov	eax, DWORD PTR _err$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], 0
$LN4@InitDirect:
; Line 157
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	mov	esi, esp
	push	eax
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+72]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 159
	mov	DWORD PTR _i$81107[ebp], 0
	jmp	SHORT $LN3@InitDirect
$LN2@InitDirect:
	mov	eax, DWORD PTR _i$81107[ebp]
	add	eax, 1
	mov	DWORD PTR _i$81107[ebp], eax
$LN3@InitDirect:
	cmp	DWORD PTR _i$81107[ebp], 36		; 00000024H
	jge	$LN1@InitDirect
; Line 160
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _i$81107[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+72]
	push	edx
	push	0
	push	22					; 00000016H
	push	512					; 00000200H
	push	1
	push	400					; 00000190H
	push	640					; 00000280H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+92]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 161
	mov	eax, DWORD PTR _i$81107[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4+216]
	mov	esi, esp
	push	edx
	push	0
	mov	eax, DWORD PTR _i$81107[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+72]
	mov	eax, DWORD PTR _i$81107[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+72]
	mov	ecx, DWORD PTR [edx]
	push	eax
	mov	edx, DWORD PTR [ecx+72]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 164
	mov	eax, DWORD PTR _i$81107[ebp]
	push	eax
	push	OFFSET ??_C@_05BOMAELGN@tex?$CFd?$AA@
	lea	ecx, DWORD PTR _value_name$81111[ebp]
	push	ecx
	call	??$sprintf_s@$09@@YAHAAY09DPBDZZ	; sprintf_s<10>
	add	esp, 12					; 0000000cH
; Line 165
	mov	esi, esp
	lea	eax, DWORD PTR _value_name$81111[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+360]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+360]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _i$81107[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx*4+368], eax
; Line 167
	jmp	$LN2@InitDirect
$LN1@InitDirect:
; Line 169
	xor	eax, eax
$LN18@InitDirect:
; Line 170
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN25@InitDirect
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 2300				; 000008fcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN25@InitDirect:
	DD	4
	DD	$LN24@InitDirect
$LN24@InitDirect:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN20@InitDirect
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN21@InitDirect
	DD	-2068					; fffff7ecH
	DD	2000					; 000007d0H
	DD	$LN22@InitDirect
	DD	-2100					; fffff7ccH
	DD	10					; 0000000aH
	DD	$LN23@InitDirect
$LN23@InitDirect:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	95					; 0000005fH
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN22@InitDirect:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	95					; 0000005fH
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	97					; 00000061H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	0
$LN21@InitDirect:
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	114					; 00000072H
	DB	0
$LN20@InitDirect:
	DB	97					; 00000061H
	DB	68					; 00000044H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	121					; 00000079H
	DB	77					; 0000004dH
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	0
?InitDirect3D@DXEngine@@AAEJPAUHWND__@@@Z ENDP		; DXEngine::InitDirect3D
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?CleanUpDirect3D@DXEngine@@AAEXXZ
_TEXT	SEGMENT
_i$81123 = -20						; size = 4
_this$ = -8						; size = 4
?CleanUpDirect3D@DXEngine@@AAEXXZ PROC			; DXEngine::CleanUpDirect3D, COMDAT
; _this$ = ecx
; Line 174
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 176
	mov	DWORD PTR _i$81123[ebp], 0
	jmp	SHORT $LN6@CleanUpDir
$LN5@CleanUpDir:
	mov	eax, DWORD PTR _i$81123[ebp]
	add	eax, 1
	mov	DWORD PTR _i$81123[ebp], eax
$LN6@CleanUpDir:
	cmp	DWORD PTR _i$81123[ebp], 36		; 00000024H
	jge	SHORT $LN4@CleanUpDir
; Line 177
	mov	eax, DWORD PTR _i$81123[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+eax*4+216], 0
	je	SHORT $LN3@CleanUpDir
	mov	eax, DWORD PTR _i$81123[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+216]
	mov	eax, DWORD PTR _i$81123[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+eax*4+216]
	mov	ecx, DWORD PTR [edx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _i$81123[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+216], 0
$LN3@CleanUpDir:
; Line 178
	jmp	SHORT $LN5@CleanUpDir
$LN4@CleanUpDir:
; Line 181
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@CleanUpDir
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN2@CleanUpDir:
; Line 182
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	SHORT $LN7@CleanUpDir
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN7@CleanUpDir:
; Line 183
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CleanUpDirect3D@DXEngine@@AAEXXZ ENDP			; DXEngine::CleanUpDirect3D
_TEXT	ENDS
PUBLIC	?CheckFullScreen@DXEngine@@QAEHXZ		; DXEngine::CheckFullScreen
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CheckFullScreen@DXEngine@@QAEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CheckFullScreen@DXEngine@@QAEHXZ PROC			; DXEngine::CheckFullScreen, COMDAT
; _this$ = ecx
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 188
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 189
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckFullScreen@DXEngine@@QAEHXZ ENDP			; DXEngine::CheckFullScreen
_TEXT	ENDS
PUBLIC	?get_d3d_device@DXEngine@@QAEPAUIDirect3DDevice9@@XZ ; DXEngine::get_d3d_device
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_d3d_device@DXEngine@@QAEPAUIDirect3DDevice9@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_d3d_device@DXEngine@@QAEPAUIDirect3DDevice9@@XZ PROC ; DXEngine::get_d3d_device, COMDAT
; _this$ = ecx
; Line 193
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 194
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
; Line 195
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_d3d_device@DXEngine@@QAEPAUIDirect3DDevice9@@XZ ENDP ; DXEngine::get_d3d_device
_TEXT	ENDS
PUBLIC	?SetTextureSamplerState@DXEngine@@AAEXW4_D3DTEXTUREFILTERTYPE@@@Z ; DXEngine::SetTextureSamplerState
PUBLIC	?SetRender@DXEngine@@QAEXW4RenderState@@@Z	; DXEngine::SetRender
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetRender@DXEngine@@QAEXW4RenderState@@@Z
_TEXT	SEGMENT
tv64 = -208						; size = 4
_this$ = -8						; size = 4
_RState$ = 8						; size = 4
?SetRender@DXEngine@@QAEXW4RenderState@@@Z PROC		; DXEngine::SetRender, COMDAT
; _this$ = ecx
; Line 199
	push	ebp
	mov	ebp, esp
	sub	esp, 208				; 000000d0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-208]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 200
	mov	eax, DWORD PTR _RState$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN3@SetRender
	cmp	DWORD PTR tv64[ebp], 1
	je	$LN2@SetRender
	cmp	DWORD PTR tv64[ebp], 2
	je	$LN1@SetRender
	jmp	$LN6@SetRender
$LN3@SetRender:
; Line 204
	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 205
	mov	esi, esp
	push	0
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 206
	mov	esi, esp
	push	0
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 207
	mov	esi, esp
	push	1
	push	14					; 0000000eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 208
	mov	esi, esp
	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 209
	mov	esi, esp
	push	8947848					; 00888888H
	push	139					; 0000008bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 210
	mov	esi, esp
	push	2
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 211
	mov	esi, esp
	push	1
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 212
	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 214
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+212]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 217
	mov	esi, esp
	push	1
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 221
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTextureSamplerState@DXEngine@@AAEXW4_D3DTEXTUREFILTERTYPE@@@Z ; DXEngine::SetTextureSamplerState
; Line 222
	jmp	$LN6@SetRender
$LN2@SetRender:
; Line 226
	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 227
	mov	esi, esp
	push	1
	push	27					; 0000001bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 228
	mov	esi, esp
	push	1
	push	15					; 0000000fH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 229
	mov	esi, esp
	push	0
	push	14					; 0000000eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 230
	mov	esi, esp
	push	1
	push	7
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 231
	mov	esi, esp
	push	-1
	push	139					; 0000008bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 232
	mov	esi, esp
	push	5
	push	19					; 00000013H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 233
	mov	esi, esp
	push	6
	push	20					; 00000014H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 234
	mov	esi, esp
	push	2
	push	9
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 236
	mov	esi, esp
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+212]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 239
	mov	esi, esp
	push	1
	push	4
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 240
	mov	esi, esp
	push	2
	push	5
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+268]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 243
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetTextureSamplerState@DXEngine@@AAEXW4_D3DTEXTUREFILTERTYPE@@@Z ; DXEngine::SetTextureSamplerState
; Line 244
	jmp	$LN6@SetRender
$LN1@SetRender:
; Line 247
	mov	esi, esp
	push	1
	push	22					; 00000016H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 248
	mov	esi, esp
	push	-1
	push	139					; 0000008bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 249
	mov	esi, esp
	push	1
	push	141					; 0000008dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 250
	mov	esi, esp
	push	1
	push	145					; 00000091H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+228]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@SetRender:
; Line 253
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 208				; 000000d0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetRender@DXEngine@@QAEXW4RenderState@@@Z ENDP		; DXEngine::SetRender
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?SetTextureSamplerState@DXEngine@@AAEXW4_D3DTEXTUREFILTERTYPE@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_SMode$ = 8						; size = 4
?SetTextureSamplerState@DXEngine@@AAEXW4_D3DTEXTUREFILTERTYPE@@@Z PROC ; DXEngine::SetTextureSamplerState, COMDAT
; _this$ = ecx
; Line 257
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 258
	mov	esi, esp
	mov	eax, DWORD PTR _SMode$[ebp]
	push	eax
	push	7
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+276]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 259
	mov	esi, esp
	mov	eax, DWORD PTR _SMode$[ebp]
	push	eax
	push	5
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+276]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 260
	mov	esi, esp
	mov	eax, DWORD PTR _SMode$[ebp]
	push	eax
	push	6
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+276]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 261
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextureSamplerState@DXEngine@@AAEXW4_D3DTEXTUREFILTERTYPE@@@Z ENDP ; DXEngine::SetTextureSamplerState
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z		; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	__$ArrayPad$
PUBLIC	?SetLight@DXEngine@@QAEXW4LightNumber@@U_D3DLIGHT9@@@Z ; DXEngine::SetLight
EXTRN	_D3DXVec3Normalize@8:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetLight@DXEngine@@QAEXW4LightNumber@@U_D3DLIGHT9@@@Z
_TEXT	SEGMENT
_tmpVec$ = -32						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_LNum$ = 8						; size = 4
_LParam$ = 12						; size = 104
?SetLight@DXEngine@@QAEXW4LightNumber@@U_D3DLIGHT9@@@Z PROC ; DXEngine::SetLight, COMDAT
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 266
	lea	eax, DWORD PTR _LParam$[ebp+64]
	push	eax
	lea	ecx, DWORD PTR _tmpVec$[ebp]
	call	??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z	; D3DXVECTOR3::D3DXVECTOR3
; Line 267
	lea	eax, DWORD PTR _tmpVec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _LParam$[ebp+64]
	push	ecx
	call	_D3DXVec3Normalize@8
; Line 268
	mov	esi, esp
	lea	eax, DWORD PTR _LParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _LNum$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+204]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 269
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SetLight
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	108					; 0000006cH
	npad	1
$LN5@SetLight:
	DD	1
	DD	$LN4@SetLight
$LN4@SetLight:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN3@SetLight
$LN3@SetLight:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	0
?SetLight@DXEngine@@QAEXW4LightNumber@@U_D3DLIGHT9@@@Z ENDP ; DXEngine::SetLight
_TEXT	ENDS
EXTRN	__fltused:DWORD
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z PROC		; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
; Line 284
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 285
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx]
	fstp	DWORD PTR [eax]
; Line 286
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+4]
	fstp	DWORD PTR [eax+4]
; Line 287
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	fld	DWORD PTR [ecx+8]
	fstp	DWORD PTR [eax+8]
; Line 288
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
??0D3DXVECTOR3@@QAE@ABU_D3DVECTOR@@@Z ENDP		; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0_D3DXMATRIXA16@@QAE@XZ			; _D3DXMATRIXA16::_D3DXMATRIXA16
PUBLIC	__$ArrayPad$
PUBLIC	?SetCamera@DXEngine@@QAEXUCameraParam@@@Z	; DXEngine::SetCamera
EXTRN	_D3DXMatrixPerspectiveFovLH@20:PROC
EXTRN	_D3DXMatrixLookAtLH@16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetCamera@DXEngine@@QAEXUCameraParam@@@Z
_TEXT	SEGMENT
tv164 = -400						; size = 8
tv159 = -392						; size = 8
_tmpAspect$ = -188					; size = 4
_matProj$ = -176					; size = 64
_matView$ = -96						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_CParam$ = 8						; size = 48
?SetCamera@DXEngine@@QAEXUCameraParam@@@Z PROC		; DXEngine::SetCamera, COMDAT
; _this$ = ecx
; File c:\users\naoya\documents\visual studio 2010\npca.jp\3dモニター制作\3dmonitor-分岐\3dmonitor\dx_engine.cpp
; Line 273
	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 408				; 00000198H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-408]
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 274
	lea	ecx, DWORD PTR _matView$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16
; Line 275
	lea	eax, DWORD PTR _CParam$[ebx+24]
	push	eax
	lea	ecx, DWORD PTR _CParam$[ebx+12]
	push	ecx
	lea	edx, DWORD PTR _CParam$[ebx]
	push	edx
	lea	eax, DWORD PTR _matView$[ebp]
	push	eax
	call	_D3DXMatrixLookAtLH@16
; Line 276
	lea	ecx, DWORD PTR _matProj$[ebp]
	call	??0_D3DXMATRIXA16@@QAE@XZ		; _D3DXMATRIXA16::_D3DXMATRIXA16
; Line 277
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR tv159[ebp], ecx
	mov	DWORD PTR tv159[ebp+4], 0
	fild	QWORD PTR tv159[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR tv164[ebp], eax
	mov	DWORD PTR tv164[ebp+4], 0
	fild	QWORD PTR tv164[ebp]
	fdivp	ST(1), ST(0)
	fstp	DWORD PTR _tmpAspect$[ebp]
; Line 278
	push	ecx
	fld	DWORD PTR _CParam$[ebx+44]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _CParam$[ebx+40]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _tmpAspect$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _CParam$[ebx+36]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _matProj$[ebp]
	push	eax
	call	_D3DXMatrixPerspectiveFovLH@20
; Line 280
	mov	esi, esp
	lea	eax, DWORD PTR _matView$[ebp]
	push	eax
	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+176]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 282
	mov	esi, esp
	lea	eax, DWORD PTR _matProj$[ebp]
	push	eax
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+176]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 283
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@SetCamera
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	48					; 00000030H
	npad	1
$LN6@SetCamera:
	DD	2
	DD	$LN5@SetCamera
$LN5@SetCamera:
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN3@SetCamera
	DD	-176					; ffffff50H
	DD	64					; 00000040H
	DD	$LN4@SetCamera
$LN4@SetCamera:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	106					; 0000006aH
	DB	0
$LN3@SetCamera:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	86					; 00000056H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	119					; 00000077H
	DB	0
?SetCamera@DXEngine@@QAEXUCameraParam@@@Z ENDP		; DXEngine::SetCamera
_TEXT	ENDS
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0_D3DXMATRIXA16@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0_D3DXMATRIXA16@@QAE@XZ PROC				; _D3DXMATRIXA16::_D3DXMATRIXA16, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.h
; Line 382
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0_D3DXMATRIXA16@@QAE@XZ ENDP				; _D3DXMATRIXA16::_D3DXMATRIXA16
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0D3DXMATRIX@@QAE@XZ PROC				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx
; Line 315
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
PUBLIC	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z			; D3DXMATRIX::operator*
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
PUBLIC	__$ArrayPad$
PUBLIC	?SetObjectMatrix@DXEngine@@QAEXUD3DXVECTOR3@@UDirectionYPR@@M@Z ; DXEngine::SetObjectMatrix
EXTRN	_D3DXMatrixRotationYawPitchRoll@16:PROC
EXTRN	_D3DXMatrixTranslation@16:PROC
EXTRN	_D3DXMatrixScaling@16:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetObjectMatrix@DXEngine@@QAEXUD3DXVECTOR3@@UDirectionYPR@@M@Z
_TEXT	SEGMENT
$T81178 = -636						; size = 64
$T81179 = -564						; size = 64
_ResultMatrix$ = -300					; size = 64
_RotMatrix$ = -228					; size = 64
_PosMatrix$ = -156					; size = 64
_ScaleMatrix$ = -84					; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_Vec$ = 8						; size = 12
_Dir$ = 20						; size = 12
_Scale$ = 32						; size = 4
?SetObjectMatrix@DXEngine@@QAEXUD3DXVECTOR3@@UDirectionYPR@@M@Z PROC ; DXEngine::SetObjectMatrix, COMDAT
; _this$ = ecx
; File c:\users\naoya\documents\visual studio 2010\npca.jp\3dモニター制作\3dmonitor-分岐\3dmonitor\dx_engine.cpp
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 640				; 00000280H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-640]
	mov	ecx, 160				; 000000a0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 288
	lea	ecx, DWORD PTR _ScaleMatrix$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
; Line 289
	lea	ecx, DWORD PTR _PosMatrix$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
; Line 290
	lea	ecx, DWORD PTR _RotMatrix$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
; Line 291
	lea	ecx, DWORD PTR _ResultMatrix$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
; Line 293
	lea	eax, DWORD PTR _ScaleMatrix$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4
; Line 294
	lea	eax, DWORD PTR _PosMatrix$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4
; Line 295
	lea	eax, DWORD PTR _RotMatrix$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4
; Line 296
	lea	eax, DWORD PTR _ResultMatrix$[ebp]
	push	eax
	call	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ; D3DXMatrixIdentity
	add	esp, 4
; Line 298
	push	ecx
	fld	DWORD PTR _Scale$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Scale$[ebp]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Scale$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _ScaleMatrix$[ebp]
	push	eax
	call	_D3DXMatrixScaling@16
; Line 299
	push	ecx
	fld	DWORD PTR _Vec$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vec$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Vec$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _PosMatrix$[ebp]
	push	eax
	call	_D3DXMatrixTranslation@16
; Line 300
	push	ecx
	fld	DWORD PTR _Dir$[ebp+4]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Dir$[ebp+8]
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR _Dir$[ebp]
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR _RotMatrix$[ebp]
	push	eax
	call	_D3DXMatrixRotationYawPitchRoll@16
; Line 302
	lea	eax, DWORD PTR _PosMatrix$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T81179[ebp]
	push	ecx
	lea	edx, DWORD PTR _RotMatrix$[ebp]
	push	edx
	lea	eax, DWORD PTR $T81178[ebp]
	push	eax
	lea	ecx, DWORD PTR _ScaleMatrix$[ebp]
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, eax
	call	??DD3DXMATRIX@@QBE?AU0@ABU0@@Z		; D3DXMATRIX::operator*
	mov	ecx, 16					; 00000010H
	mov	esi, eax
	lea	edi, DWORD PTR _ResultMatrix$[ebp]
	rep movsd
; Line 304
	mov	esi, esp
	lea	eax, DWORD PTR _ResultMatrix$[ebp]
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+176]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 305
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@SetObjectM
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 640				; 00000280H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
	npad	2
$LN8@SetObjectM:
	DD	4
	DD	$LN7@SetObjectM
$LN7@SetObjectM:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN3@SetObjectM
	DD	-156					; ffffff64H
	DD	64					; 00000040H
	DD	$LN4@SetObjectM
	DD	-228					; ffffff1cH
	DD	64					; 00000040H
	DD	$LN5@SetObjectM
	DD	-300					; fffffed4H
	DD	64					; 00000040H
	DD	$LN6@SetObjectM
$LN6@SetObjectM:
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN5@SetObjectM:
	DB	82					; 00000052H
	DB	111					; 0000006fH
	DB	116					; 00000074H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN4@SetObjectM:
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN3@SetObjectM:
	DB	83					; 00000053H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	77					; 0000004dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
?SetObjectMatrix@DXEngine@@QAEXUD3DXVECTOR3@@UDirectionYPR@@M@Z ENDP ; DXEngine::SetObjectMatrix
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_D3DXMatrixMultiply@12:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??DD3DXMATRIX@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
_matT$ = -84						; size = 64
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_mat$ = 12						; size = 4
??DD3DXMATRIX@@QBE?AU0@ABU0@@Z PROC			; D3DXMATRIX::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft directx sdk (june 2010)\include\d3dx9math.inl
; Line 883
	push	ebp
	mov	ebp, esp
	sub	esp, 280				; 00000118H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-280]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 884
	lea	ecx, DWORD PTR _matT$[ebp]
	call	??0D3DXMATRIX@@QAE@XZ			; D3DXMATRIX::D3DXMATRIX
; Line 885
	mov	eax, DWORD PTR _mat$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _matT$[ebp]
	push	edx
	call	_D3DXMatrixMultiply@12
; Line 886
	mov	ecx, 16					; 00000010H
	lea	esi, DWORD PTR _matT$[ebp]
	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
	rep movsd
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 887
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@operator
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 280				; 00000118H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN5@operator:
	DD	1
	DD	$LN4@operator
$LN4@operator:
	DD	-84					; ffffffacH
	DD	64					; 00000040H
	DD	$LN3@operator
$LN3@operator:
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	84					; 00000054H
	DB	0
??DD3DXMATRIX@@QBE?AU0@ABU0@@Z ENDP			; D3DXMATRIX::operator*
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@00000000
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC	; D3DXMatrixIdentity, COMDAT
; Line 1988
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 1997
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+56]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+52]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+48]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+44]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+36]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+32]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+28]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+24]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+16]
	mov	eax, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [eax+12]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _pOut$[ebp]
	fldz
	fstp	DWORD PTR [edx+4]
; Line 1999
	mov	eax, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [eax+60]
	mov	ecx, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [ecx+40]
	mov	edx, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [edx+20]
	mov	eax, DWORD PTR _pOut$[ebp]
	fld1
	fstp	DWORD PTR [eax]
; Line 2000
	mov	eax, DWORD PTR _pOut$[ebp]
; Line 2001
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
PUBLIC	?SetViewTarget@DXEngine@@QAEXH@Z		; DXEngine::SetViewTarget
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetViewTarget@DXEngine@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_view_id$ = 8						; size = 4
?SetViewTarget@DXEngine@@QAEXH@Z PROC			; DXEngine::SetViewTarget, COMDAT
; _this$ = ecx
; File c:\users\naoya\documents\visual studio 2010\npca.jp\3dモニター制作\3dmonitor-分岐\3dmonitor\dx_engine.cpp
; Line 308
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 309
	mov	esi, esp
	mov	eax, DWORD PTR _view_id$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4+216]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+148]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 310
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetViewTarget@DXEngine@@QAEXH@Z ENDP			; DXEngine::SetViewTarget
_TEXT	ENDS
PUBLIC	?SetDefaultBuffer@DXEngine@@QAEXXZ		; DXEngine::SetDefaultBuffer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetDefaultBuffer@DXEngine@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?SetDefaultBuffer@DXEngine@@QAEXXZ PROC			; DXEngine::SetDefaultBuffer, COMDAT
; _this$ = ecx
; Line 313
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 314
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+148]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 315
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SetDefaultBuffer@DXEngine@@QAEXXZ ENDP			; DXEngine::SetDefaultBuffer
_TEXT	ENDS
PUBLIC	?GetBufferDC@DXEngine@@QAEJPAPAUHDC__@@@Z	; DXEngine::GetBufferDC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetBufferDC@DXEngine@@QAEJPAPAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_buffer_dc$ = 8						; size = 4
?GetBufferDC@DXEngine@@QAEJPAPAUHDC__@@@Z PROC		; DXEngine::GetBufferDC, COMDAT
; _this$ = ecx
; Line 318
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 319
	mov	esi, esp
	mov	eax, DWORD PTR _buffer_dc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+60]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 320
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBufferDC@DXEngine@@QAEJPAPAUHDC__@@@Z ENDP		; DXEngine::GetBufferDC
_TEXT	ENDS
PUBLIC	?ReleaseBufferDC@DXEngine@@QAEJPAPAUHDC__@@@Z	; DXEngine::ReleaseBufferDC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ReleaseBufferDC@DXEngine@@QAEJPAPAUHDC__@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_buffer_dc$ = 8						; size = 4
?ReleaseBufferDC@DXEngine@@QAEJPAPAUHDC__@@@Z PROC	; DXEngine::ReleaseBufferDC, COMDAT
; _this$ = ecx
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 324
	mov	esi, esp
	mov	eax, DWORD PTR _buffer_dc$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+64]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 325
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBufferDC@DXEngine@@QAEJPAPAUHDC__@@@Z ENDP	; DXEngine::ReleaseBufferDC
_TEXT	ENDS
PUBLIC	?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z		; DXEngine::SetupMouse
PUBLIC	?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z	; DXEngine::SetupKeybord
PUBLIC	?InitDirectInput@DXEngine@@AAEJPAUHWND__@@PAUHINSTANCE__@@@Z ; DXEngine::InitDirectInput
EXTRN	_DirectInput8Create@20:PROC
EXTRN	_IID_IDirectInput8W:BYTE
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InitDirectInput@DXEngine@@AAEJPAUHWND__@@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
_hInstance$ = 12					; size = 4
?InitDirectInput@DXEngine@@AAEJPAUHWND__@@PAUHINSTANCE__@@@Z PROC ; DXEngine::InitDirectInput, COMDAT
; _this$ = ecx
; Line 329
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 330
	mov	DWORD PTR _hr$[ebp], 0
; Line 332
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpDirectInput@DXEngine@@AAEXXZ	; DXEngine::CleanUpDirectInput
; Line 336
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 512				; 00000200H
	push	eax
	push	OFFSET _IID_IDirectInput8W
	push	2048					; 00000800H
	mov	ecx, DWORD PTR _hInstance$[ebp]
	push	ecx
	call	_DirectInput8Create@20
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@InitDirect@2
; Line 337
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@InitDirect@2
$LN3@InitDirect@2:
; Line 340
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z ; DXEngine::SetupKeybord
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@InitDirect@2
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@InitDirect@2
$LN2@InitDirect@2:
; Line 341
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z	; DXEngine::SetupMouse
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@InitDirect@2
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN4@InitDirect@2
$LN1@InitDirect@2:
; Line 343
	mov	eax, DWORD PTR _hr$[ebp]
$LN4@InitDirect@2:
; Line 344
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InitDirectInput@DXEngine@@AAEJPAUHWND__@@PAUHINSTANCE__@@@Z ENDP ; DXEngine::InitDirectInput
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?CleanUpDirectInput@DXEngine@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?CleanUpDirectInput@DXEngine@@AAEXXZ PROC		; DXEngine::CleanUpDirectInput, COMDAT
; _this$ = ecx
; Line 348
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 350
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN5@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN5@CleanUpDir@2:
; Line 351
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN4@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN4@CleanUpDir@2:
; Line 353
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN3@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+516], 0
$LN3@CleanUpDir@2:
; Line 354
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN2@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+520], 0
$LN2@CleanUpDir@2:
; Line 356
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+512], 0
	je	SHORT $LN6@CleanUpDir@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+512]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+512], 0
$LN6@CleanUpDir@2:
; Line 357
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CleanUpDirectInput@DXEngine@@AAEXXZ ENDP		; DXEngine::CleanUpDirectInput
_TEXT	ENDS
PUBLIC	??_C@_1DI@FGBEPFOF@0?$KN0?$PM0?$NM0?$PM0?I0?$JCvz?$IJ?$IL0g0M0?$HO0?$FL0?$JD0g0W0_0?$AC?$AA?6?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?$AA@ ; `string'
EXTRN	_c_dfDIKeyboard:BYTE
EXTRN	_GUID_SysKeyboard:BYTE
;	COMDAT ??_C@_1DI@FGBEPFOF@0?$KN0?$PM0?$NM0?$PM0?I0?$JCvz?$IJ?$IL0g0M0?$HO0?$FL0?$JD0g0W0_0?$AC?$AA?6?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@FGBEPFOF@0?$KN0?$PM0?$NM0?$PM0?I0?$JCvz?$IJ?$IL0g0M0?$HO0?$FL0?$JD0g0W0_0?$AC?$AA?6?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?$AA@ DB 0adH
	DB	'0', 0fcH, '0', 0dcH, '0', 0fcH, '0', 0c9H, '0', 092H, '0zv', 08bH
	DB	089H, 'g0M0~0[0', 093H, '0g0W0_0', 02H, '0', 0aH, 00H, 08H, 0ffH
	DB	']0', 093H, '0j0', 0d0H, '0', 0abH, '0j0', 01fH, 0ffH, 09H, 0ffH
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z PROC		; DXEngine::SetupKeybord, COMDAT
; _this$ = ecx
; Line 361
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 366
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 516				; 00000204H
	push	eax
	push	OFFSET _GUID_SysKeyboard
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+512]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN4@SetupKeybo
; Line 367
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN5@SetupKeybo
$LN4@SetupKeybo:
; Line 369
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	jne	SHORT $LN3@SetupKeybo
; Line 371
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1DI@FGBEPFOF@0?$KN0?$PM0?$NM0?$PM0?I0?$JCvz?$IJ?$IL0g0M0?$HO0?$FL0?$JD0g0W0_0?$AC?$AA?6?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 372
	xor	eax, eax
	jmp	$LN5@SetupKeybo
$LN3@SetupKeybo:
; Line 378
	mov	esi, esp
	push	OFFSET _c_dfDIKeyboard
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@SetupKeybo
; Line 379
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN5@SetupKeybo
$LN2@SetupKeybo:
; Line 384
	mov	esi, esp
	push	22					; 00000016H
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN1@SetupKeybo
; Line 385
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN5@SetupKeybo
$LN1@SetupKeybo:
; Line 388
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 390
	xor	eax, eax
$LN5@SetupKeybo:
; Line 391
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetupKeybord@DXEngine@@AAEJPAUHWND__@@@Z ENDP		; DXEngine::SetupKeybord
_TEXT	ENDS
PUBLIC	??_C@_1DM@JAFJKNDA@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAn?$AAp?$AAu?$AAt0L0?$LF0?$NN0?$PM0?H0W0f0D0j0DST?$IK?$LP0?l0?Y0?k0g0Y0?$AC?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@CGOOEILF@0?$NO0?$KG0?$LJ0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0g0W0_?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?6N?V0n0?G0?P0?$KE0?$LJ0gd?M@ ; `string'
EXTRN	_c_dfDIMouse2:BYTE
EXTRN	_GUID_SysMouse:BYTE
;	COMDAT ??_C@_1DM@JAFJKNDA@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAn?$AAp?$AAu?$AAt0L0?$LF0?$NN0?$PM0?H0W0f0D0j0DST?$IK?$LP0?l0?Y0?k0g0Y0?$AC?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@JAFJKNDA@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAn?$AAp?$AAu?$AAt0L0?$LF0?$NN0?$PM0?H0W0f0D0j0DST?$IK?$LP0?l0?Y0?k0g0Y0?$AC?$AA?$AA@ DB 'D'
	DB	00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'I', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'L0', 0b5H, '0', 0ddH, '0'
	DB	0fcH, '0', 0c8H, '0W0f0D0j0D0TS', 0bfH, 08aH, 0ecH, '0', 0d9H, '0'
	DB	0ebH, '0g0Y0', 02H, '0', 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@CGOOEILF@0?$NO0?$KG0?$LJ0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0g0W0_?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?6N?V0n0?G0?P0?$KE0?$LJ0gd?M@
CONST	SEGMENT
??_C@_1EM@CGOOEILF@0?$NO0?$KG0?$LJ0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0g0W0_?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?6N?V0n0?G0?P0?$KE0?$LJ0gd?M@ DB 0deH
	DB	'0', 0a6H, '0', 0b9H, '0L0', 08bH, 089H, 'd0K0', 08aH, '0~0[0', 093H
	DB	'0g0W0_0', 08H, 0ffH, ']0', 093H, '0j0', 0d0H, '0', 0abH, '0j0'
	DB	01fH, 0ffH, 09H, 0ffH, 0aH, 00H, 0d6H, 'Nn0', 0c7H, '0', 0d0H, '0'
	DB	0a4H, '0', 0b9H, '0g0', 0cdH, 'd\O', 092H, '0W0~0Y0', 00H, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
_hWnd$ = 8						; size = 4
?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z PROC		; DXEngine::SetupMouse, COMDAT
; _this$ = ecx
; Line 395
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 396
	mov	DWORD PTR _hr$[ebp], 0
; Line 399
	mov	esi, esp
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 520				; 00000208H
	push	eax
	push	OFFSET _GUID_SysMouse
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+512]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+512]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN5@SetupMouse
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN6@SetupMouse
$LN5@SetupMouse:
; Line 401
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	jne	SHORT $LN4@SetupMouse
; Line 403
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1EM@CGOOEILF@0?$NO0?$KG0?$LJ0L?$IJ?$IL0d0K0?$IK0?$HO0?$FL0?$JD0g0W0_?$PP?$AI0?$FN0?$JD0j0?P0?$KL0j?$PP?$BP?$PP?7?$AA?6N?V0n0?G0?P0?$KE0?$LJ0gd?M@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 404
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN6@SetupMouse
$LN4@SetupMouse:
; Line 410
	mov	esi, esp
	push	OFFSET _c_dfDIMouse2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN3@SetupMouse
; Line 411
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	$LN6@SetupMouse
$LN3@SetupMouse:
; Line 418
	mov	esi, esp
	push	5
	mov	eax, DWORD PTR _hWnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+52]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN2@SetupMouse
; Line 420
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CleanUpDirectInput@DXEngine@@AAEXXZ	; DXEngine::CleanUpDirectInput
; Line 421
	cmp	DWORD PTR _hr$[ebp], -2147467263	; 80004001H
	jne	SHORT $LN1@SetupMouse
; Line 423
	mov	esi, esp
	push	16					; 00000010H
	push	OFFSET ??_C@_1DI@FKECHAAB@?$AAn?$AAp?$AAc?$AAa?$AA?5?$AA3?$AAD?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAP?$AAr?$AAo?$AAj?$AAe?$AAc?$AAt?$AA?50?$KI0?i0?$PM?$AA?$AA@
	push	OFFSET ??_C@_1DM@JAFJKNDA@?$AAD?$AAi?$AAr?$AAe?$AAc?$AAt?$AAI?$AAn?$AAp?$AAu?$AAt0L0?$LF0?$NN0?$PM0?H0W0f0D0j0DST?$IK?$LP0?l0?Y0?k0g0Y0?$AC?$AA?$AA@
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@SetupMouse:
; Line 425
	mov	eax, DWORD PTR _hr$[ebp]
	jmp	SHORT $LN6@SetupMouse
$LN2@SetupMouse:
; Line 429
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 431
	xor	eax, eax
$LN6@SetupMouse:
; Line 432
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetupMouse@DXEngine@@AAEJPAUHWND__@@@Z ENDP		; DXEngine::SetupMouse
_TEXT	ENDS
PUBLIC	?GetMouseInput@DXEngine@@AAEXXZ			; DXEngine::GetMouseInput
PUBLIC	?GetKeybordInput@DXEngine@@AAEXXZ		; DXEngine::GetKeybordInput
PUBLIC	?GetInput@DXEngine@@QAEXXZ			; DXEngine::GetInput
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetInput@DXEngine@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?GetInput@DXEngine@@QAEXXZ PROC				; DXEngine::GetInput, COMDAT
; _this$ = ecx
; Line 436
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 437
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	je	SHORT $LN2@GetInput
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetKeybordInput@DXEngine@@AAEXXZ	; DXEngine::GetKeybordInput
$LN2@GetInput:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	je	SHORT $LN3@GetInput
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetMouseInput@DXEngine@@AAEXXZ		; DXEngine::GetMouseInput
$LN3@GetInput:
; Line 439
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInput@DXEngine@@QAEXXZ ENDP				; DXEngine::GetInput
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetKeybordInput@DXEngine@@AAEXXZ
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?GetKeybordInput@DXEngine@@AAEXXZ PROC			; DXEngine::GetKeybordInput, COMDAT
; _this$ = ecx
; Line 443
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 446
	push	256					; 00000100H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 524				; 0000020cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 448
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+516], 0
	jne	SHORT $LN5@GetKeybord
	jmp	$LN6@GetKeybord
$LN5@GetKeybord:
; Line 450
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 524				; 0000020cH
	mov	esi, esp
	push	eax
	push	256					; 00000100H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+516]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 451
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@GetKeybord
; Line 454
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN3@GetKeybord:
; Line 455
	cmp	DWORD PTR _hr$[ebp], -2147024866	; 8007001eH
	jne	SHORT $LN6@GetKeybord
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+516]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+516]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN3@GetKeybord
$LN6@GetKeybord:
; Line 459
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetKeybordInput@DXEngine@@AAEXXZ ENDP			; DXEngine::GetKeybordInput
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?GetMouseInput@DXEngine@@AAEXXZ
_TEXT	SEGMENT
_hr$ = -20						; size = 4
_this$ = -8						; size = 4
?GetMouseInput@DXEngine@@AAEXXZ PROC			; DXEngine::GetMouseInput, COMDAT
; _this$ = ecx
; Line 463
	push	ebp
	mov	ebp, esp
	sub	esp, 216				; 000000d8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-216]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 466
	push	20					; 00000014H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 780				; 0000030cH
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 468
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+520], 0
	jne	SHORT $LN5@GetMouseIn
	jmp	$LN6@GetMouseIn
$LN5@GetMouseIn:
; Line 469
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 780				; 0000030cH
	mov	esi, esp
	push	eax
	push	20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+520]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+36]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
; Line 470
	cmp	DWORD PTR _hr$[ebp], 0
	jge	SHORT $LN6@GetMouseIn
; Line 473
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
$LN3@GetMouseIn:
; Line 474
	cmp	DWORD PTR _hr$[ebp], -2147024866	; 8007001eH
	jne	SHORT $LN6@GetMouseIn
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+520]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+520]
	mov	ecx, DWORD PTR [ecx]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hr$[ebp], eax
	jmp	SHORT $LN3@GetMouseIn
$LN6@GetMouseIn:
; Line 481
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 216				; 000000d8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetMouseInput@DXEngine@@AAEXXZ ENDP			; DXEngine::GetMouseInput
_TEXT	ENDS
PUBLIC	?get_keybord_state@DXEngine@@QAEPAEXZ		; DXEngine::get_keybord_state
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_keybord_state@DXEngine@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?get_keybord_state@DXEngine@@QAEPAEXZ PROC		; DXEngine::get_keybord_state, COMDAT
; _this$ = ecx
; Line 485
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 486
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 524				; 0000020cH
; Line 487
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?get_keybord_state@DXEngine@@QAEPAEXZ ENDP		; DXEngine::get_keybord_state
_TEXT	ENDS
PUBLIC	?get_mouse_state@DXEngine@@QAE?AU_DIMOUSESTATE2@@XZ ; DXEngine::get_mouse_state
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?get_mouse_state@DXEngine@@QAE?AU_DIMOUSESTATE2@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
?get_mouse_state@DXEngine@@QAE?AU_DIMOUSESTATE2@@XZ PROC ; DXEngine::get_mouse_state, COMDAT
; _this$ = ecx
; Line 491
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 492
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 780				; 0000030cH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR [eax+16]
	mov	DWORD PTR [ecx+16], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 493
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
?get_mouse_state@DXEngine@@QAE?AU_DIMOUSESTATE2@@XZ ENDP ; DXEngine::get_mouse_state
_TEXT	ENDS
EXTRN	__imp__vsprintf_s:PROC
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$sprintf_s@$09@@YAHAAY09DPBDZZ
_TEXT	SEGMENT
__ArgList$ = -8						; size = 4
__Dest$ = 8						; size = 4
__Format$ = 12						; size = 4
??$sprintf_s@$09@@YAHAAY09DPBDZZ PROC			; sprintf_s<10>, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\stdio.h
; Line 323
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
	mov	esi, esp
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Format$[ebp]
	push	ecx
	push	10					; 0000000aH
	mov	edx, DWORD PTR __Dest$[ebp]
	push	edx
	call	DWORD PTR __imp__vsprintf_s
	add	esp, 16					; 00000010H
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??$sprintf_s@$09@@YAHAAY09DPBDZZ ENDP			; sprintf_s<10>
_TEXT	ENDS
END
